# [START swagger]
swagger: "2.0"
info:
  description: "A simple Google Cloud Endpoints API example."
  title: "Endpoints Example"
  version: "1.0.0"
host: "sample-project-196107.appspot.com"
# [END swagger]
basePath: "/"
consumes:
- "application/json"
produces:
- "application/json"
schemes:
- "https"
paths:
  "/colleges/{name}":
    get:
      description: "Returns a single college"
      operationId: "get_colleges"
      produces:
      - "application/json"
      parameters:
        - name: name
          in: path
          required: true
          description: "college name"
          type: string
      responses:
        200:
          description: "A College"
          #schema:
          #  $ref: "#/definitions/College"
        404:
          description: "College does not exists."
  "/departments/{name}":
    get:
      description: "Returns a single department"
      operationId: "get_departments"
      produces:
      - "application/json"
      parameters:
        - name: name
          in: path
          required: true
          description: "department name"
          type: string
      responses:
        200:
          description: "A Department"
          #schema:
          #  $ref: "#/definitions/Department"
        404:
          description: "Department does not exists."
  "/programs/{name}":
     get:
      description: "Returns a single program"
      operationId: "get_programs"
      produces:
      - "application/json"
      parameters:
        - name: name
          in: path
          required: true
          description: "program name"
          type: string
      responses:
        200:
          description: "A Program"
          #schema:
          #  $ref: "#/definitions/Program"
        404:
          description: "Program does not exists."
  "/generalcourses/{name}":
    get:
      description: "Returns a general course"
      operationId: "get_general_courses"
      produces:
      - "application/json"
      parameters:
        - name: name
          in: path
          required: true
          description: "general course"
          type: string
      responses:
        200:
          description: "A general course"
          #schema:
          #  $ref: "#/definitions/Program"
        404:
          description: "General Course does not exists."
  "/specificcourses/{name}":
   get:
      description: "Returns a specific course"
      operationId: "get_specific_courses"
      produces:
      - "application/json"
      parameters:
        - name: name
          in: path
          required: true
          description: "specific course name"
          type: string
      responses:
        200:
          description: "A specific course"
          #schema:
          #  $ref: "#/definitions/Program"
        404:
          description: "Specific Course does not exists."
  "/auth/info/googlejwt":
    get:
      description: "Returns the requests' authentication information."
      operationId: "auth_info_google_jwt"
      produces:
      - "application/json"
      responses:
        200:
          description: "Authentication info."
          schema:
            $ref: "#/definitions/authInfoResponse"
      security:
      - google_jwt: []
      - gae_default_service_account: []
      - google_service_account: []
  "/auth/info/googleidtoken":
    get:
      description: "Returns the requests' authentication information."
      operationId: "authInfoGoogleIdToken"
      produces:
      - "application/json"
      responses:
        200:
          description: "Authentication info."
          schema:
            $ref: "#/definitions/authInfoResponse"
      security:
      - google_id_token: []
  "/auth/info/firebase":
    get:
      description: "Returns the requests' authentication information."
      operationId: "authInfoFirebase"
      produces:
      - "application/json"
      responses:
        200:
          description: "Authentication info."
          schema:
            $ref: "#/definitions/authInfoResponse"
      security:
      - firebase: []

definitions:
  college:
    properties:
      name:
        type: "string"
      short_name:
        type: "string"
  department:
    properties:
      name:
        type: "string"
      short_name:
        type: "string"
      department_owner:
        type: "integer"
  program:
    properties:
      name:
        type: "string"
      type:
        type: "string"
      short_name:
        type: "string"
      program_owner:
        type: "integer"
  course:
    properties:
      name:
        type: "string"
      number:
        type: "string"
      short_name:
        type: "string"
      prerequisite:
        type: "string"
      general_course_owner:
        type: "integer"
  authInfoResponse:
    properties:
      id:
        type: "string"
      email:
        type: "string"
# [START securityDef]
securityDefinitions:
  # This section configures basic authentication with an API key.
  api_key:
    type: "apiKey"
    name: "key"
    in: "query"
# [END securityDef]
  # This section configures authentication using Google API Service Accounts
  # to sign a json web token. This is mostly used for server-to-server
  # communication.
  google_jwt:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # This must match the 'iss' field in the JWT.
    x-google-issuer: "jwt-client.endpoints.sample.google.com"
    # Update this with your service account's email address.
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/jwk/YOUR-SERVICE-ACCOUNT-EMAIL"
    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
    x-google-audiences: "echo.endpoints.sample.google.com"
    #x-google-allow: all
  # This section configures authentication using Google App Engine default
  # service account to sign a json web token. This is mostly used for
  # server-to-server communication.
  gae_default_service_account:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # Replace YOUR-CLIENT-PROJECT-ID with your client project ID.
    x-google-issuer: "YOUR-CLIENT-PROJECT-ID@appspot.gserviceaccount.com"
    # Replace YOUR-CLIENT-PROJECT-ID with your client project ID.
    x-google-jwks_uri: "https://www.googleapis.com/robot/v1/metadata/x509/YOUR-CLIENT-PROJECT-ID@appspot.gserviceaccount.com"
    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
    x-google-audiences: "echo.endpoints.sample.google.com"
    #x-google-allow: all
  # This section configures authentication using a service account
  # to sign a json web token. This is mostly used for server-to-server
  # communication.
  google_service_account:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # Replace YOUR-SERVICE-ACCOUNT-EMAIL with your service account email.
    x-google-issuer: "YOUR-SERVICE-ACCOUNT-EMAIL"
    # Replace YOUR-SERVICE-ACCOUNT-EMAIL with your service account email.
    x-google-jwks_uri: "https://www.googleapis.com/robot/v1/metadata/x509/YOUR-SERVICE-ACCOUNT-EMAIL"
    # This must match the "aud" field in the JWT. You can add multiple audiences to accept JWTs from multiple clients.
    x-google-audiences: "echo.endpoints.sample.google.com"
    #x-google-allow: all
  # This section configures authentication using Google OAuth2 ID Tokens.
  # ID Tokens can be obtained using OAuth2 clients, and can be used to access
  # your API on behalf of a particular user.
  google_id_token:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://accounts.google.com"
    x-google-jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
    # Your OAuth2 client's Client ID must be added here. You can add multiple client IDs to accept tokens form multiple clients.
    x-google-audiences: "YOUR-CLIENT-ID"
    #x-google-allow: all
  # This section configures authentication using Firebase Auth.
  # [START firebaseAuth]
  firebase:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://securetoken.google.com/YOUR-PROJECT-ID"
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
    x-google-audiences: "YOUR-PROJECT-ID"
    #x-google-allow: all
  # [END firebaseAuth]
